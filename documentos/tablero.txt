Un documento de diseño y desarrollo es clave para definir y estructurar proyectos de datos, aplicaciones, sistemas o infraestructura, y proporciona una guía clara para el equipo. A continuación se muestra una estructura recomendada para un documento de este tipo, ideal para proyectos de integraciones de datos, desarrollo de aplicaciones o diseño de sistemas.

### 1. **Portada** 
   - Título del documento -
   - Nombre del proyecto -
   - Versión del documento -
   - Fecha de creación -
   - Autor(es) y sus roles -

### 2. **Índice**
   - Tabla de contenido con secciones y subsecciones numeradas para facilitar la navegación.-

### 3. **Resumen Ejecutivo**
   - Descripción general y breve del propósito del proyecto.-
   - Objetivos principales.
   - Alcance del proyecto.-

### 4. **Contexto del Proyecto**
   - **Descripción del Problema**: Explicación de la necesidad o problema que resuelve el proyecto.
   - **Objetivos**: Metas específicas que se pretenden lograr.
   - **Alcance del Proyecto**: Definición de los límites, incluidos lo que cubre el proyecto y lo que no.

### 5. **Requisitos del Proyecto**
   - **Requisitos Funcionales**: Descripción de lo que el sistema debe hacer. Ejemplos: "El sistema debe permitir la autenticación de usuarios."
   - **Requisitos No Funcionales**: Requisitos relacionados con el rendimiento, seguridad, y restricciones de diseño.
   - **Requisitos Técnicos**: Herramientas, tecnologías o plataformas específicas que se utilizarán.

### 6. **Arquitectura del Sistema**
   - **Diagramas de Arquitectura**: Diagramas como arquitectura de datos, arquitectura de software o diagramas de red.
   - **Componentes Principales**: Descripción de los módulos, servicios, bases de datos y otras piezas clave.
   - **Flujos de Datos**: Diagramas de cómo fluye la información dentro del sistema.

### 7. **Diseño Detallado**
   - **Diagramas UML**: Casos de uso, diagramas de clases, secuencia y componentes según sea necesario.
   - **Estructura de la Base de Datos**: Tablas, relaciones, y especificaciones de base de datos (si aplica).
   - **Especificaciones de Interfaz**: Mockups o bocetos de interfaces, diseño de API, o especificaciones de formato de datos.

### 8. **Plan de Desarrollo**
   - **Cronograma**: Lista de tareas con estimaciones de tiempo.
   - **Asignación de Recursos**: Identificación de recursos humanos y técnicos necesarios.
   - **Riesgos y Mitigación**: Posibles riesgos técnicos o de negocio y estrategias para abordarlos.

### 9. **Pruebas**
   - **Estrategia de Pruebas**: Descripción de cómo se validarán los requisitos.
   - **Casos de Prueba**: Descripciones detalladas de cada prueba a realizar, sus entradas y salidas esperadas.
   - **Criterios de Aceptación**: Condiciones que deben cumplirse para considerar la entrega como satisfactoria.

### 10. **Despliegue**
   - **Plan de Implementación**: Instrucciones para la instalación y despliegue.
   - **Configuración del Entorno**: Entornos necesarios como desarrollo, pruebas, producción y configuraciones específicas.
   - **Estrategia de Retroceso**: Plan para revertir el despliegue en caso de error.

### 11. **Mantenimiento y Soporte**
   - **Plan de Mantenimiento**: Definición de cómo se realizará el soporte y el mantenimiento.
   - **Estrategias de Monitorización**: Herramientas o técnicas para monitorear el sistema post-despliegue.
   - **Actualizaciones y Parches**: Proceso para gestionar futuras actualizaciones.

### 12. **Anexos**
   - **Documentación Técnica**: Referencias a documentación de APIs, bibliotecas, dependencias externas, etc.
   - **Glosario**: Términos específicos del proyecto.
   - **Referencias**: Fuentes y referencias externas consultadas o utilizadas.

---

Este formato se puede adaptar según la complejidad del proyecto, y es una guía completa que proporciona una visión clara para todas las fases del diseño y desarrollo.

---------------------------------------------------------------------------------------------------------------------------------------------
|   WAR: Warriors (Guerreros)                                                                                                                |
|   WAR + WA: Warren McCulloch y Walter Pitts presentan su modelo de neuronas artificiales, considerada la primera inteligencia artificial.  |
|   KOT: Philip Kotler es considerado el padre del marketing moderno.                                                                        |
---------------------------------------------------------------------------------------------------------------------------------------------



hora del problema, tabla donde aparece y coigo, fecha a la tabla de errores, historico de errores

			
NOMBRE DEL ATRIBUTO 	TIPO DE DATO	ABREVIACION 	LONGITUD

CREATE TABLE TBL_STG_CLIENTE(
   SK_NUM_DIM_CLIENTE NUMBER(7),
   NUM_NIT NUMBER(15),
   STR_RAZON_SOCIAL VARCHAR2(100),
   STR_SUCURSAL VARCHAR2(4),
   STR_RAZON_SOCIAL_SUCURSAL VARCHAR2(100),
   STR_TELEFONO VARCHAR2(15),
   STR_DIRECCION VARCHAR2(150)
   STR_CONTACTO_PRINCIPAL VARCHAR2(100)
   DT_FECHA_INGRESO DATE,
   STR_ANTIGUEDAD VARCHAR2(20),
   STR_CALIFICACION VARCHAR2(5),
   STR_CONDICION_DE_PAGO VARCHAR2(5),
   STR_DESC_CONDICION_DE_PAGO VARCHAR2(20),
   STR_CARTERA	VARCHAR2(35),
   STR_FACTURACION VARCHAR2(25),
   STR_SECTOR_ECONOMICO VARCHAR2(6),
   STR_SERVICIO_QUE_PREDOMINA	VARCHAR2(6),
   STR_TIPO_EMPRESA VARCHAR2(20),
   DT_FECHA_ACTUALIZACION DATE
);


1. SELECT NOMBRE, MONTHS_BETWEEN(FECHA_INGRESO, SYSDATE) AS STR_ANTIGUEDAD
   FROM EMPLEADOS;

2. SELECT EM.NOMBRE, CU.TIPO
   FROM EMPLEADOS EM
   LEFT JOIN CUENTAS CU ON EM.ID_EMPLEADO = CU.ID_EMPLEADO;

3. SELECT NOMBRE
   FROM EMPLEADOS
   WHERE (SELECT MAX(SALDO)
            FROM CUENTAS);

4. 

5. SELECT TIPO, SUM(SALDO) AS TOTAL_SALDO
   FROM CUENTAS
   GROUP BY TIPO;

6. AUN NO ENTIENDO EL USO DEL WITH RECURSIVE
7. LOS JOINS PUEDEN SER MAS EXTENSOS SI TOCA HACER CONEXXIONES CON MAS DE DOS Tablas
8. PUEDO VER HACE CUANTO HIZO ALGUNA COMPRA O MOVIMIENTO FINANCIERO